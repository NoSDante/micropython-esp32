(()=>{var __webpack_modules__={138:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval("/* harmony import */ var _js_script_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(639);\n/* harmony import */ var _js_script_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_js_script_js__WEBPACK_IMPORTED_MODULE_0__);\n\r\n\n\n//# sourceURL=webpack://package/./src/index.js?")},639:()=>{eval('Element.prototype.removeClass = function(cls) {\r\n    if (removals.indexOf(\'*\') === -1) {\r\n        // Use native jQuery methods if there is no wildcard matching\r\n        this.classList.remove(cls);\r\n        return this;\r\n    }\r\n    var patt = new RegExp(\'\\\\s\' +\r\n        cls.replace(/\\*/g, \'[A-Za-z0-9-_]+\').split(\' \').join(\'\\\\s|\\\\s\') +\r\n        \'\\\\s\', \'g\');\r\n\r\n    for (const [key, value] of Object.entries(this)) {\r\n        var cn = \' \' + key.className + \' \';\r\n        while (patt.test(cn)) {\r\n            cn = cn.replace(patt, \' \');\r\n        }\r\n        item.className = cn.trim();\r\n    }\r\n    return this;\r\n}\r\nElement.prototype.disableItems = function() {\r\n    this.querySelectorAll("input").setAttribute("disabled");\r\n    this.querySelectorAll("button").setAttribute("disabled");\r\n    this.querySelectorAll("select").setAttribute("disabled");\r\n}\r\nElement.prototype.enableItems = function() {\r\n    this.querySelectorAll("input").removeAttribute("disabled");\r\n    this.querySelectorAll("button").removeAttribute("disabled");\r\n    this.querySelectorAll("select").removeAttribute("disabled");\r\n}\r\n\r\nfunction removeClassWildcard($element, removals) {\r\n    if (removals.indexOf(\'*\') === -1) {\r\n        // Use native jQuery methods if there is no wildcard matching\r\n        $element.removeClass(removals);\r\n        return $element;\r\n    }\r\n\r\n    var patt = new RegExp(\'\\\\s\' +\r\n        removals.replace(/\\*/g, \'[A-Za-z0-9-_]+\').split(\' \').join(\'\\\\s|\\\\s\') +\r\n        \'\\\\s\', \'g\');\r\n\r\n    $element.each(function(i, it) {\r\n        var cn = \' \' + it.className + \' \';\r\n        while (patt.test(cn)) {\r\n            cn = cn.replace(patt, \' \');\r\n        }\r\n        it.className = $.trim(cn);\r\n    });\r\n\r\n    return $element;\r\n}\r\n\r\nfunction disableItems($element) {\r\n    $element.find("input").attr("disabled", "disabled");\r\n    $element.find("button").attr("disabled", "disabled");\r\n    $element.find("select").attr("disabled", "disabled");\r\n}\r\n\r\nfunction enableItems($element) {\r\n    $element.find("input").removeAttr("disabled");\r\n    $element.find("button").removeAttr("disabled");\r\n    $element.find("select").removeAttr("disabled");\r\n}\r\n\r\nfunction timeout(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nconst LOCAL = true;\r\n\r\n/** MAIN */\r\nvar page = {\r\n\r\n    init: function() {\r\n        this.setup();\r\n        this.show();\r\n    },\r\n\r\n    show: function(config) {\r\n        //$.extend(page.config, config);\r\n        $("#pageloading").remove();\r\n        $(".wrapper").removeClass("visually-hidden");\r\n    },\r\n\r\n    // page message\r\n    message: function(msg, type = "info") {\r\n        let cls = type;\r\n        switch (type) {\r\n            case "info":\r\n                cls = "primary";\r\n                break;\r\n            case "error":\r\n                cls = "danger";\r\n                break;\r\n            case "warning":\r\n                cls = "warning";\r\n                break;\r\n        }\r\n        let toast = document.getElementById(\'messagePage\');\r\n        document.getElementById(\'messageContent\').innerHTML = msg;\r\n        document.getElementById(\'messageType\').innerHTML = type.charAt(0).toUpperCase() + type.slice(1);\r\n        document.getElementById(\'messageTime\').innerHTML = new Date().toLocaleTimeString(\'en-DE\', { hour12: false });\r\n        removeClassWildcard($(toast), "bg-*");\r\n        toast.classList.add("bg-" + cls)\r\n        new bootstrap.Toast(toast).show();\r\n    },\r\n\r\n    setup: function() {\r\n\r\n        // sidebar scrollbar\r\n        let sidebar = document.getElementById("sidebar");\r\n        $(sidebar).mCustomScrollbar({\r\n            theme: "minimal",\r\n        });\r\n\r\n        // tooltips\r\n        let tooltipTriggerList = [].slice.call(document.querySelectorAll(\'[data-bs-toggle="tooltip"]\'))\r\n        tooltipTriggerList.map(function(tooltipTriggerEl) {\r\n            return new bootstrap.Tooltip(tooltipTriggerEl)\r\n        })\r\n\r\n        // TODO\r\n        // observe window resize\r\n        window.addEventListener(\'resize\', function() {\r\n            // get window width\r\n            const iw = window.innerWidth;\r\n            const bp = 768;\r\n            // determine named size\r\n            if (iw <= bp || iw > bp) {\r\n                if (sidebar.classList.contains("active")) {\r\n                    $("#sidebarCollapse").removeClass("active");\r\n                } else {\r\n                    $("#sidebarCollapse").addClass("active");\r\n\r\n                }\r\n                //console.log(iw);\r\n            }\r\n        });\r\n\r\n        // sidebar navigation\r\n        document.getElementById("sidebarCollapse").addEventListener("click", (event) => {\r\n            event.target.classList.toggle("active");\r\n            sidebar.classList.toggle("active");\r\n            document.getElementById("content").classList.toggle("active");\r\n        });\r\n\r\n    }\r\n\r\n}\r\n\r\nvar server = {\r\n\r\n    ap_url: "http://192.168.1.4:8080",\r\n    url: "",\r\n    base_url: "http://192.168.2.",\r\n    base_start: 100,\r\n    base_end: 116,\r\n    name: "MicroWebSrv2",\r\n    port: ":8080",\r\n    connected: false,\r\n    ap: false,\r\n\r\n    base: function(url = server.base_url) {\r\n\r\n        // server settings from json-file\r\n        let path = window.location.href.substring(0, (window.location.href.lastIndexOf("/")) + 1);\r\n        $.getJSON(path + "server.json", function(obj) {\r\n            $.each(obj, function(key, value) {\r\n                server[key] = value;\r\n            })\r\n        });\r\n\r\n        // local must find server-ip\r\n        if (LOCAL == true) {\r\n            let hit = false;\r\n            for (let i = server.base_start = 100; i <= server.base_end; i++) {\r\n                url = server.base_url + i + server.port;\r\n                if (server.hasOwnProperty("url") && server.url.length != 0) {\r\n                    url = server.url\r\n                }\r\n                console.log(url, " connecting...")\r\n                server.getLocal(url, function(callback) {\r\n                    hit = true;\r\n                    server.url = callback;\r\n                    server.connected = true;\r\n                    console.log("server url:", server.url)\r\n                        // init features\r\n                    init();\r\n                })\r\n                if (hit == true) break;\r\n            }\r\n            // let counter = server.base_start;\r\n            // for (let i = server.base_start = 100; i <= server.base_end; i++) {\r\n            //     let url = server.base_url + i + server.port;\r\n            //     let msg = document.getElementById("notConnected")\r\n            //     server.getLocal(url, function(callback) {\r\n            //         counter++;\r\n            //         if (counter == server.base_end) {\r\n            //             switch (server.url.length) {\r\n            //                 case 0:\r\n            //                     msg.classList.remove("visually-hidden");\r\n            //                     msg.innerHTML = server.name + " is not connected!";\r\n            //                     break;\r\n            //                 case 1:\r\n            //                     msg.classList.add("visually-hidden");\r\n            //                     server.url = callback;\r\n            //                     server.connected = true;\r\n            //                     // init features\r\n            //                     init();\r\n            //                     break;\r\n            //             }\r\n            //             if (server.url.length > 1) {\r\n            //                 // msg.classList.add("visually-hidden");\r\n            //                 // server.url = callback;\r\n            //                 // server.connected = true;\r\n            //                 // init features\r\n            //                 // init();\r\n            //                 let list = document.getElementById("listServer")\r\n            //                 let ul = document.createElement(\'ul\');\r\n            //                 list.innerHTML = server.url.length + " " + server.name + " found!";\r\n            //                 list.appendChild(ul);\r\n            //                 list.classList.remove("visually-hidden");\r\n            //                 server.url.forEach(function(item, index, array) {\r\n            //                     let li = document.createElement(\'li\');\r\n            //                     ul.appendChild(li);\r\n            //                     li.innerHTML += "<a target=_blank href=" + item + ">" + server.name + " (" + item + ")</a>";\r\n            //                 });\r\n            //             }\r\n            //         }\r\n            //     })\r\n            // }\r\n        } else {\r\n            if (window.location.protocol == "http:") {\r\n                if (server.hasOwnProperty("url") && server.url.length != 0) {\r\n                    url = server.url\r\n                } else {\r\n                    url = window.location.href.substring(0, window.location.href.lastIndexOf("/"));\r\n                }\r\n                console.log(url, " connecting...")\r\n                server.get(url, function(callback) {\r\n                    server.url = callback;\r\n                    server.connected = true;\r\n                    console.log("server url:", server.url)\r\n                        // init features\r\n                    init();\r\n                })\r\n            }\r\n        }\r\n    },\r\n\r\n    // access point\r\n    ap: function(url = server.ap_url) {\r\n        console.log(url, " connecting...")\r\n        server.getLocal(url, function(callback) {\r\n            hit = true;\r\n            server.url = callback;\r\n            server.connected = true;\r\n            server.ap = true;\r\n            console.log("server url:", server.url)\r\n                // init features\r\n            init();\r\n        })\r\n    },\r\n\r\n    // get server-name from header\r\n    get: function(url, callback) {\r\n        $.ajax({\r\n            url: url,\r\n            type: "GET",\r\n            timeout: 5000,\r\n            async: true,\r\n            success: function(data, textStatus, jqXHR) {\r\n                // Get the raw header string\r\n                var headers = jqXHR.getAllResponseHeaders();\r\n                // Convert the header string into an array\r\n                // of individual headers\r\n                var arr = headers.trim().split(/[\\r\\n]+/);\r\n                // Create a map of header names to values\r\n                var headerMap = {};\r\n                arr.forEach(function(line) {\r\n                    var parts = line.split(\': \');\r\n                    var header = parts.shift();\r\n                    var value = parts.join(\': \');\r\n                    headerMap[header] = value;\r\n                });\r\n                if (headerMap["server"].match(server.name)) {\r\n                    console.log("HeaderMap: \'server\' ", headerMap["server"])\r\n                    page.message(headerMap["server"] + \' is connected\', "info")\r\n                    callback(url);\r\n                }\r\n            },\r\n            complete: function(xhr, textStatus) {\r\n                if (server.connected == false) {\r\n                    let msg = document.getElementById("notConnected")\r\n                    msg.classList.remove("visually-hidden");\r\n                    msg.innerHTML = server.name + " is not connected!";\r\n                } else {\r\n                    let msg = document.getElementById("notConnected")\r\n                    msg.classList.add("visually-hidden");\r\n                }\r\n            }\r\n        })\r\n    },\r\n\r\n    // get server-name from response\r\n    getLocal: function(url, callback) {\r\n        $.ajax({\r\n            url: url + "/server",\r\n            type: "GET",\r\n            timeout: 5000,\r\n            async: true,\r\n            contentType: \'application/json; charset=utf-8\',\r\n            success: function(data, textStatus, jqXHR) {\r\n                if (typeof(data) === undefined || data == null) {\r\n                    console.log("getServerName no response")\r\n                } else {\r\n                    if (data.hasOwnProperty("server")) {\r\n                        page.message(data["server"] + \' is connected\', "info")\r\n                        callback(url);\r\n                    }\r\n                }\r\n            },\r\n            complete: function(xhr, textStatus) {\r\n                if (server.connected == false) {\r\n                    let msg = document.getElementById("notConnected")\r\n                    msg.classList.remove("visually-hidden");\r\n                    msg.innerHTML = server.name + " is not connected!";\r\n                } else {\r\n                    let msg = document.getElementById("notConnected")\r\n                    msg.classList.add("visually-hidden");\r\n                }\r\n            }\r\n        })\r\n    },\r\n\r\n    ping: function(url) {\r\n        $.ajax({\r\n            url: url,\r\n            type: \'GET\',\r\n            cache: false,\r\n            dataType: \'json\',\r\n            success: function() {\r\n                console.log(\'success ping \' + url);\r\n            },\r\n            error: function() {\r\n                console.log(\'error ping \' + url);\r\n            }\r\n        });\r\n    },\r\n\r\n    sendRequest: function(url, data, callback) {\r\n        let type = "POST";\r\n        if (data === undefined) {\r\n            type = \'GET\';\r\n        }\r\n        $.ajax({\r\n            url: url,\r\n            type: type,\r\n            data: data,\r\n            cache: false,\r\n            dataType: \'json\',\r\n            success: function(data, textStatus, jqXHR) {\r\n                if (typeof(data) === undefined || data == null) {\r\n                    page.message("Server error", "error")\r\n                    console.log("no response")\r\n                } else {\r\n                    console.log(data)\r\n                        // Callback\r\n                    callback(data);\r\n                    page.message(data["success"], "success")\r\n\r\n                }\r\n            },\r\n            error: function(jqXHR, textStatus, errorThrown) {\r\n                console.log("Exception " + jqXHR.responseText, errorThrown);\r\n                page.message("Unknonw exception", "error")\r\n\r\n            },\r\n            complete: function() {\r\n                console.log(\'sendRequest: complete\');\r\n            }\r\n        });\r\n    },\r\n\r\n    getResponse: function() {\r\n        return this.response;\r\n    }\r\n\r\n}\r\n\r\n/** FEATURES */\r\nvar dashboard = {\r\n\r\n    config: {\r\n        dashboard: "#dashboard",\r\n        resetItem: ".reset-item",\r\n        resetButton: "#resetButton",\r\n        setupItem: ".setup-item",\r\n        setupButton: "#setupButton",\r\n        rebootButton: "#rebootButton",\r\n        wifiItem: ".wifi-item",\r\n        wifiOnButton: "#wifiOnButton",\r\n        wifiOffButton: "#wifiOffButton",\r\n        wifiState: ".wifiState",\r\n        apItem: ".ap-item",\r\n        apOnButton: "#apOnButton",\r\n        apOffButton: "#apOffButton",\r\n        apState: ".apState"\r\n    },\r\n\r\n    systemstate: {},\r\n\r\n    init: function() {\r\n        //$.extend(form.config, config);\r\n        disableItems($(this.config.dashboard));\r\n        this.setupEvent.done = false;\r\n        this.setup();\r\n        if (LOCAL == true) server.ping(server.url);\r\n        this.getSystemState(function(callback) { dashboard.setSystemState(dashboard.systemstate = callback) });\r\n    },\r\n\r\n    setApState: function(state, cls) {\r\n        let item = document.querySelector(dashboard.config.apState);\r\n        removeClassWildcard($(item), "text-*")\r\n        item.classList.add(cls);\r\n        item.innerHTML = state;\r\n        let icon = document.querySelector(".faAp");\r\n        removeClassWildcard($(icon), "text-*")\r\n        icon.classList.remove("text-danger");\r\n        icon.classList.remove("text-success");\r\n        icon.classList.add(cls);\r\n    },\r\n\r\n    setWifiState: function(state, cls) {\r\n        let item = document.querySelector(dashboard.config.wifiState);\r\n        removeClassWildcard($(item), "text-*")\r\n        item.classList.add(cls);\r\n        item.innerHTML = state;\r\n        let icon = document.querySelector(".faWifi");\r\n        removeClassWildcard($(icon), "text-*")\r\n        icon.classList.add(cls);\r\n    },\r\n\r\n    setNetState: function(callback) {\r\n        for (const [key, value] of Object.entries(callback)) {\r\n            let state = "unknown";\r\n            let item = [];\r\n            let cls = "text-dark";\r\n\r\n            if (key == "WIFI") {\r\n                if (value == "true") {\r\n                    state = "On";\r\n                    if (callback["CONNECTED"] == "true") {\r\n                        state = "Verbunden";\r\n                        cls = "text-success";\r\n                    } else {\r\n                        state = "keine Verbindung";\r\n                        cls = "text-danger";\r\n                    }\r\n                } else {\r\n                    state = "Off";\r\n                }\r\n                this.setWifiState(state, cls);\r\n            };\r\n\r\n            cls = "text-dark";\r\n            state = "unknown";\r\n            if (key == "AP" || key == "AP_IF") {\r\n                if (callback["AP_IP_ADDRESS"] != "0.0.0.0") {\r\n                    state = "Aktiv";\r\n                    cls = "text-success"\r\n                } else {\r\n                    state = "Inaktiv";\r\n                    cls = "text-danger"\r\n                }\r\n                this.setApState(state, cls);\r\n\r\n            };\r\n\r\n        }\r\n    },\r\n\r\n    setSystemState: function(callback) {\r\n        this.showSystemState(callback);\r\n        this.setNetState(callback);\r\n    },\r\n\r\n    showSystemState: function(callback) {\r\n        let table = document.querySelector("#systemstateTable tbody");\r\n        document.getElementById("systemstateTable").classList.remove("visually-hidden");\r\n        document.getElementById("systemstateAlert").remove();\r\n        for (const [key, value] of Object.entries(callback)) {\r\n            table.insertRow(-1).innerHTML = \'<tr><td>\' + key + \'</td><td>\' + value + \'</td></tr>\';\r\n\r\n        }\r\n    },\r\n\r\n    setup: function() {\r\n        if (this.setupEvent.done == false) {\r\n            this.setupEvent();\r\n        }\r\n    },\r\n\r\n\r\n    // get systemstate\r\n    getSystemState: function(callback) {\r\n        $.ajax({\r\n            url: server.url + "/systemstate",\r\n            type: \'GET\',\r\n            cache: false,\r\n            dataType: \'json\',\r\n            success: function(data, textStatus, jqXHR) {\r\n                if (typeof(data) === undefined || data == null) {\r\n                    console.log("getSystemState: no response")\r\n                    page.message("Could not load systemstate", "error")\r\n                } else {\r\n                    if (data.hasOwnProperty("error")) {\r\n                        page.message(data["error"], "error")\r\n                    }\r\n                    if (data.hasOwnProperty("info")) {\r\n                        page.message(data["info"], "info")\r\n                    }\r\n                    if (data.hasOwnProperty("success")) {\r\n                        page.message(data["success"], "info")\r\n                        delete data["success"]\r\n                        callback(data)\r\n                        enableItems($(dashboard.config.dashboard));\r\n                    }\r\n                }\r\n            },\r\n            error: function(jqXHR, textStatus, errorThrown) {\r\n                console.log("Exception " + jqXHR.responseText, errorThrown);\r\n                page.message("Could not load systemstate", "error")\r\n            },\r\n            complete: function() {\r\n                console.log(\'getSystemState: complete\');\r\n            }\r\n        });\r\n    },\r\n\r\n    setupEvent: function() {\r\n\r\n        $("#dashboard .card").hover(\r\n            function(event) {\r\n                $(this).find("p.card-text").toggleClass("text-primary fw-bold");\r\n                // Rainbow Border\r\n                $(this).toggleClass("shadowcolorscheme");\r\n                $(this).css("cursor", "pointer");\r\n                //AP Item\r\n                $(this).find(".faAp").toggleClass("fa-fade");\r\n                //Reset Item\r\n                $(this).find(".fa-gear").toggleClass("fa-spin");\r\n                //Reboot Item\r\n                $(this).find(".fa-compact-disc").toggleClass("fa-spin");\r\n                //WiFi Item\r\n                $(this).find(".fa-wifi").toggleClass("fa-beat");\r\n            }\r\n        );\r\n\r\n        // Reset-Item\r\n        $(this.config.resetItem).click(() => {\r\n            var modal = new bootstrap.Modal(document.getElementById(\'resetModal\'))\r\n            modal.show();\r\n        });\r\n        // Setup-Item\r\n        $(this.config.setupItem).click(() => {\r\n            var modal = new bootstrap.Modal(document.getElementById(\'rebootModal\'))\r\n            modal.show();\r\n        });\r\n        // WiFi-Item\r\n        $(this.config.wifiItem).click(() => {\r\n            var modal = new bootstrap.Modal(document.getElementById(\'wifiModal\'))\r\n            modal.show();\r\n        });\r\n        // Ap-Item\r\n        $(this.config.apItem).click(() => {\r\n            var modal = new bootstrap.Modal(document.getElementById(\'apModal\'))\r\n            modal.show();\r\n        });\r\n\r\n        // Reset (ESP32: machine.reset())\r\n        $(this.config.resetButton).click(() => {\r\n            server.sendRequest(url = server.url + "/reset", data = undefined, function(callback) {\r\n                if (callback.hasOwnProperty("success")) {\r\n                    page.message(callback["success"], "success")\r\n                    let info = document.getElementById("pageInfo");\r\n                    info.classList.remove("visually-hidden")\r\n                    info.innerHTML = callback["success"];\r\n                    for (let i = 1; i < 100; i++) {\r\n                        setTimeout(info.innerHTML = info.innerHTML + ".", 10);\r\n                    }\r\n                    window.location.reload();\r\n                }\r\n            })\r\n        });\r\n        // Setup (ESP32: delete boot.db)\r\n        $(this.config.setupButton).click(() => {\r\n            server.sendRequest(url = server.url + "/resetbootfile", data = undefined, function(callback) {\r\n                if (callback.hasOwnProperty("success")) {\r\n                    page.message(callback["success"], "success")\r\n                }\r\n                if (callback.hasOwnProperty("error")) {\r\n                    page.message(callback["success"], "success")\r\n                }\r\n            })\r\n        });\r\n        // WiFi Off\r\n        $(this.config.wifiOffButton).click(() => {\r\n            server.sendRequest(url = server.url + "/wifiturnoff", data = undefined, function(callback) {\r\n                if (callback.hasOwnProperty("success")) {\r\n                    page.message(callback["success"], "success")\r\n                    dashboard.setWifiState("Off", "text-danger")\r\n                }\r\n                if (callback.hasOwnProperty("error")) {\r\n                    page.message(callback["error"], "error")\r\n                }\r\n            })\r\n\r\n        });\r\n        // WiFi On\r\n        $(this.config.wifiOnButton).click(() => {\r\n            server.sendRequest(url = server.url + "/wifiturnon", data = undefined, function(callback) {\r\n                if (callback.hasOwnProperty("success")) {\r\n                    page.message(callback["success"], "success")\r\n                    dashboard.setWifiState("On", "text-success")\r\n                }\r\n                if (callback.hasOwnProperty("error")) {\r\n                    page.message(callback["error"], "error")\r\n                }\r\n            })\r\n\r\n        });\r\n        // Ap On\r\n        $(this.config.apOnButton).click(() => {\r\n            server.sendRequest(url = server.url + "/apturnon", data = undefined, function(callback) {\r\n                if (callback.hasOwnProperty("success")) {\r\n                    page.message(callback["success"], "success")\r\n                    dashboard.setApState("Aktiv", "text-success")\r\n                }\r\n                if (callback.hasOwnProperty("error")) {\r\n                    page.message(callback["error"], "error")\r\n                }\r\n            })\r\n        });\r\n        // Ap Off\r\n        $(this.config.apOffButton).click(() => {\r\n            server.sendRequest(url = server.url + "/apturnoff", data = undefined, function(callback) {\r\n                if (callback.hasOwnProperty("success")) {\r\n                    page.message(callback["success"], "success")\r\n                    dashboard.setApState("Inaktiv", "text-danger")\r\n                }\r\n                if (callback.hasOwnProperty("error")) {\r\n                    page.message(callback["error"], "error")\r\n                }\r\n            })\r\n        });\r\n        // Setup/Reset\r\n        $(this.config.rebootButton).click(() => {\r\n            server.sendRequest(url = server.url + "/resetbootfile", data = undefined, function(callback) {\r\n                if (callback["success"]) {\r\n                    if (LOCAL == true) server.ping(server.url);\r\n                    setTimeout(server.sendRequest(url = server.url + "/reset", data = undefined, function(callback) { server.response = callback }), 1000);\r\n                }\r\n            })\r\n        });\r\n\r\n        done = true;\r\n    },\r\n}\r\n\r\nvar bootmgr = {\r\n\r\n    config: {\r\n        $loadBootConfig: $("#loadBootConfig"),\r\n        $saveBootConfig: $("#saveBootConfig"),\r\n        $saveAndBoot: $("#saveAndBoot"),\r\n        $bootmanager: $("#bootmanager")\r\n    },\r\n\r\n    objects: [\r\n        "DEBUG",\r\n        "NETWORK",\r\n        "SDCARD",\r\n        "I2C",\r\n        "TIMEZONE",\r\n        "RTC"\r\n    ],\r\n\r\n    data: {\r\n        changed: false,\r\n        delete: {},\r\n        tmp: {},\r\n        networks: {\r\n            "default": {\r\n                "essid": "",\r\n                "password": "",\r\n                "static_ip": false,\r\n                "ip": "",\r\n                "subnet": "",\r\n                "gateway": "",\r\n                "dns": ""\r\n            }\r\n        },\r\n        boot: {},\r\n        default: {\r\n            "DEBUG": false,\r\n            "TIMEZONE": {\r\n                "UTC": 2,\r\n                "ZONE": "MESZ - Mitteleuropäische Sommerzeit (UTC+2)",\r\n            },\r\n            "SDCARD": {\r\n                "SPI": 1,\r\n                "CS": 13,\r\n                "MISO": 2,\r\n                "WIDTH": 1,\r\n                "PATH": "/sd"\r\n            },\r\n            "RTC": {\r\n                "MODUL": "DS1307"\r\n            },\r\n            "NETWORK": {\r\n                "RECONNECT": 0,\r\n                "WIFI": false,\r\n                "SMART": false,\r\n                "AP_IF": true,\r\n                "AP": false,\r\n                "DEFAULT": ""\r\n            },\r\n            "I2C": {\r\n                "SLOT": 1,\r\n                "SDA": 21,\r\n                "SCL": 22,\r\n                "FREQ": 400000\r\n            }\r\n        }\r\n    },\r\n\r\n    init: function() {\r\n        this.getBootConfig(function(callback) { bootmgr.data.boot = callback });\r\n        this.networks.getNetworks(function(callback) { bootmgr.network.setNetworks(callback) });\r\n        this.network.init();\r\n        this.sendEvent();\r\n        this.loadEvent();\r\n        this.restartEvent();\r\n    },\r\n\r\n    setup: function() {\r\n        this.setupObjects(this.objects);\r\n        this.network.setup();\r\n        this.data.delete = {};\r\n        this.setupEvent.done = true;\r\n    },\r\n\r\n    // Click events load/send/restart\r\n    loadEvent: function() {\r\n        this.config.$loadBootConfig.click(function() {\r\n            bootmgr.getBootConfig(function(callback) { bootmgr.data.boot = callback });\r\n            bootmgr.networks.getNetworks(function(callback) { bootmgr.network.setNetworks(callback) });\r\n        })\r\n    },\r\n    sendEvent: function() {\r\n        bootmgr.config.$saveBootConfig.click(function() {\r\n            bootmgr.saveBootConfig(function(callback) { bootmgr.data.boot = callback });\r\n        })\r\n    },\r\n    // Restart\r\n    restartEvent: function() {\r\n        bootmgr.config.$saveAndBoot.click(function() {\r\n            bootmgr.saveBootConfig(function(callback) {\r\n                bootmgr.data.boot = callback;\r\n                if (LOCAL == true) server.ping(server.url);\r\n                server.sendRequest(url = server.url + "/resetbootfile", data = undefined, function(callback) {\r\n                    if (callback["success"]) {\r\n                        if (LOCAL == true) server.ping(server.url);\r\n                        server.sendRequest(url = server.url + "/reset", data = undefined, function(callback) { server.response = callback });\r\n                    }\r\n                })\r\n            });\r\n\r\n        });\r\n    },\r\n\r\n    // get data from server\r\n    getBootConfig: function(callback) {\r\n        disableItems(this.config.$bootmanager)\r\n        $.ajax({\r\n            url: server.url + "/bootconfig",\r\n            type: \'GET\',\r\n            cache: false,\r\n            dataType: \'json\',\r\n            success: function(data, textStatus, jqXHR) {\r\n                if (typeof(data) === undefined || data == null) {\r\n                    console.log("getBootConfig: no response")\r\n                    page.message("Could not load bootconfig", "error")\r\n                }\r\n                if (data.hasOwnProperty("error")) {\r\n                    page.message(data["error"], "error")\r\n                    console.log("getBootConfig:", data["error"])\r\n                    bootmgr.data.boot = {};\r\n                }\r\n                if (data.hasOwnProperty("info")) {\r\n                    //console.log("bootconfig data:", data)\r\n                    page.message(data["info"] + "<br>Set default values", "info")\r\n                        //delete data["info"]\r\n                    callback(bootmgr.data.default);\r\n                    enableItems(bootmgr.config.$bootmanager)\r\n                    bootmgr.config.$saveBootConfig.attr("disabled", "disabled");\r\n                    bootmgr.setup();\r\n                }\r\n                if (data.hasOwnProperty("success")) {\r\n                    //console.log("bootconfig data:", data)\r\n                    page.message(data["success"], "info")\r\n                    delete data["success"];\r\n                    callback(data);\r\n                    enableItems(bootmgr.config.$bootmanager)\r\n                    bootmgr.config.$saveBootConfig.attr("disabled", "disabled");\r\n                    bootmgr.setup();\r\n                }\r\n            },\r\n            error: function(jqXHR, textStatus, errorThrown) {\r\n                console.log("Exception " + jqXHR.responseText, errorThrown);\r\n                page.message("Could not load bootconfig", "error")\r\n                bootmgr.data.boot = {};\r\n            },\r\n            complete: function() {\r\n                bootmgr.config.$loadBootConfig.removeAttr("disabled");\r\n                console.log(\'getBootConfig: complete\');\r\n\r\n            }\r\n        });\r\n    },\r\n    // save data on server\r\n    saveBootConfig: function(callback) {\r\n        // delete unused/not checked items\r\n        bootmgr.deleteItems();\r\n        $.ajax({\r\n            url: server.url + "/savebootconfig",\r\n            type: \'POST\',\r\n            contentType: \'application/json; charset=utf-8\',\r\n            data: JSON.stringify(bootmgr.data.boot),\r\n            dataType: \'json\',\r\n            success: function(data, textStatus, jqXHR) {\r\n                if (typeof(data) === undefined || data == null) {\r\n                    page.message("Colud not save bootconfig!", "error")\r\n                    console.log("saveBootConfig: no response")\r\n                    return;\r\n                }\r\n                if (data.hasOwnProperty("error")) {\r\n                    page.message(data["error"], "error")\r\n                    console.log("saveBootConfig:", data["error"])\r\n                }\r\n                if (data.hasOwnProperty("success")) {\r\n                    page.message(data["success"], "success")\r\n                    delete data["success"]\r\n                    callback(data);\r\n                    bootmgr.setup();\r\n                }\r\n\r\n            },\r\n            error: function(jqXHR, textStatus, errorThrown) {\r\n                console.log("Exception " + jqXHR.responseText, errorThrown);\r\n                page.message("Colud not save bootconfig!", "error")\r\n            },\r\n            complete: function() {\r\n                console.log(\'saveBootConfig: complete\');\r\n            }\r\n        });\r\n    },\r\n\r\n    // edit data object\r\n    updateBootConfig: function(obj, key, value) {\r\n        this.config.$saveBootConfig.removeAttr("disabled");\r\n        this.data.changed = true;\r\n        if (typeof(obj) !== undefined) {\r\n            if (typeof(this.data.boot[obj]) === undefined) {\r\n                this.data.boot[obj] = {};\r\n            } else {\r\n                if (value != null && key === undefined) {\r\n                    this.data.boot[obj] = value;\r\n                }\r\n            }\r\n            if (typeof(key) !== undefined) {\r\n                this.data.boot[obj][key] = value;\r\n            }\r\n        }\r\n    },\r\n    deleteItems: function() {\r\n        for (const [key] of Object.entries(this.data.delete)) {\r\n            if (this.data.boot[key] !== undefined) {\r\n                delete this.data.boot[key]\r\n            }\r\n        }\r\n    },\r\n\r\n    // markiert Labels, wenn Werte geändert wurden\r\n    markCheckboxLabel: function($label, value) {\r\n        if (value == true && $label.html() == "OFF" || value == false && $label.html() == "ON") {\r\n            $label.addClass("text-dark").removeClass("text-white");\r\n        }\r\n        if (value == true && $label.html() == "ON" || value == false && $label.html() == "OFF") {\r\n            $label.addClass("text-white").removeClass("text-dark");\r\n        }\r\n    },\r\n    markInputLabel: function($label, value) {\r\n        if (value == $label.html()) {\r\n            $label.removeClass("fw-bold");\r\n        } else {\r\n            $label.addClass("fw-bold");\r\n        }\r\n    },\r\n\r\n    // set Events\r\n    setupEvent: {\r\n        done: false,\r\n        checkboxObject: function(obj, $element) {\r\n            var $divObj = $("#edit" + obj.toUpperCase());\r\n            var notDelete = ["DEBUG"];\r\n            $element.click(\r\n                function(event) {\r\n                    let $checkbox = $(event.target);\r\n                    let key = $checkbox.attr("name");\r\n                    if (key === undefined) return;\r\n                    let $label = $checkbox.parent().find(".object-label");\r\n                    let value = false;\r\n                    if ($checkbox.is(\':checked\')) {\r\n                        value = true;\r\n                    }\r\n                    bootmgr.markCheckboxLabel($label, value)\r\n                    if (value == false) {\r\n                        disableItems($divObj)\r\n                            // Check if a value not exists in the array\r\n                        if (notDelete.indexOf(obj) === -1) {\r\n                            bootmgr.data.delete[obj] = true;\r\n                        } else {\r\n                            bootmgr.updateBootConfig(obj, key = undefined, val = false);\r\n                        }\r\n                        bootmgr.config.$saveBootConfig.removeAttr("disabled");\r\n                    }\r\n                    if (value == true) {\r\n                        enableItems($divObj);\r\n                        // Check if a value not exists in the array\r\n                        if (notDelete.indexOf(obj) === -1) {\r\n                            delete bootmgr.data.delete[obj];\r\n                        } else {\r\n                            bootmgr.updateBootConfig(obj, key = undefined, val = true);\r\n                        }\r\n                        if (!bootmgr.data.boot.hasOwnProperty(obj)) {\r\n                            obj = key.toUpperCase()\r\n                            bootmgr.data.boot[obj] = Object.assign({}, bootmgr.data.default[obj]);\r\n                            bootmgr.setupEvent.done = false;\r\n                            for (const [key, value] of Object.entries(bootmgr.data.boot[obj])) {\r\n                                bootmgr.setupItems(key, value, obj)\r\n                            }\r\n                            bootmgr.setupEvent.done = true;\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n            );\r\n        },\r\n        checkboxItem: function(obj, $element) {\r\n            // Update Value & Switch Label\r\n            $element.click(\r\n                function(event) {\r\n                    let $checkbox = $(event.target);\r\n                    let $label = $checkbox.parent().parent().parent().find(".check-label");\r\n                    let key = $checkbox.attr("name");\r\n                    let value = false;\r\n                    if (key === undefined) return;\r\n                    if ($checkbox.is(\':checked\')) {\r\n                        value = true;\r\n                    }\r\n                    bootmgr.markCheckboxLabel($label, value)\r\n                    if (key == \'wifi\' && value == true) {\r\n                        bootmgr.updateBootConfig(obj, "reconnect".toUpperCase(), bootmgr.data.tmp["reconnect"]);\r\n                        $("input[name=reconnect]").val(bootmgr.data.tmp["reconnect"]);\r\n                        $("#Reconnect h5").html(bootmgr.data.tmp["reconnect"]);\r\n                        $("#Reconnect button").removeAttr("disabled");\r\n                        $("input[name=reconnect]").removeAttr(\'disabled\');\r\n                    }\r\n                    if (key == \'wifi\' && value != true) {\r\n                        bootmgr.updateBootConfig(obj, "reconnect".toUpperCase(), 0);\r\n                        $("#Reconnect button").attr(\'disabled\', \'disabled\');\r\n                        $("input[name=reconnect]").attr(\'disabled\', \'disabled\');\r\n                        $("input[name=reconnect]").val(0);\r\n                        $("#Reconnect h5").html("0")\r\n                    }\r\n                    bootmgr.updateBootConfig(obj, key.toUpperCase(), value);\r\n                }\r\n            );\r\n        },\r\n        inputItem: function(obj, $element) {\r\n            $element.blur(\r\n                function() {\r\n                    let $input = $(this);\r\n                    let key = $input.attr("name");\r\n                    let value = $input.val();\r\n                    let $label = $input.parent().parent().parent().find(".text-label");\r\n                    if (key === undefined) {\r\n                        return;\r\n                    }\r\n                    if (typeof value === "string") {\r\n                        if (!isNaN(parseInt(value))) {\r\n                            value = parseInt(value);\r\n                        }\r\n                    }\r\n                    bootmgr.updateBootConfig(obj, key.toUpperCase(), value);\r\n                    bootmgr.markInputLabel($label, value);\r\n                }\r\n            );\r\n        },\r\n        selectItem: function(obj, $element) {\r\n            $element.change(\r\n                function() {\r\n                    let $select = $(this);\r\n                    let key = $select.attr("name");\r\n                    let value = $select.val();\r\n                    let $label = $select.parent().parent().find(".text-label");\r\n                    if (key === undefined) {\r\n                        return;\r\n                    }\r\n                    let $option = $select.find("option:selected");\r\n\r\n                    if ($option.attr("key") == "zone") {\r\n                        if ($option.attr("data")) {\r\n                            bootmgr.updateBootConfig(obj, $option.attr("key").toUpperCase(), $option.attr("data"));\r\n                        } else {\r\n                            bootmgr.updateBootConfig(obj, $option.attr("key").toUpperCase(), "(UTC+" + value + ")");\r\n                        }\r\n                        //bootmgr.updateBootConfig(obj, key.toUpperCase(), value);\r\n                        //bootmgr.markInputLabel($label, value);\r\n                        //return;\r\n                    }\r\n                    if (typeof value === "string") {\r\n                        if (!isNaN(parseInt(value))) {\r\n                            value = parseInt(value);\r\n                        }\r\n                    }\r\n                    bootmgr.updateBootConfig(obj, key.toUpperCase(), value);\r\n                    bootmgr.markInputLabel($label, value);\r\n                }\r\n            );\r\n        }\r\n    },\r\n\r\n    // set events / data values\r\n    setupObjects: function(objects) {\r\n        objects.forEach(function(item) {\r\n            let $editObj = $("input[name=" + item.toLowerCase() + "]");\r\n            let $label = $editObj.parent().find(".check-label.badge");\r\n            if (bootmgr.data.boot.hasOwnProperty(item)) {\r\n                $editObj.attr("checked", "checked");\r\n                bootmgr.setCheckbox($editObj, true);\r\n                bootmgr.setLabel($label, true);\r\n                for (const [key, value] of Object.entries(bootmgr.data.boot[item])) {\r\n                    bootmgr.setupItems(key, value, item)\r\n                }\r\n\r\n                if (item == "DEBUG" && bootmgr.data.boot["DEBUG"] == false) {\r\n                    $editObj.removeAttr("checked");\r\n                    bootmgr.setCheckbox($editObj, false);\r\n                    bootmgr.setLabel($label, false);\r\n                }\r\n            } else {\r\n                disableItems($("#edit" + item.toUpperCase()));\r\n                $editObj.removeAttr("checked");\r\n                bootmgr.setCheckbox($editObj, false);\r\n                bootmgr.setLabel($label, false);\r\n            }\r\n            if (bootmgr.setupEvent.done == false) {\r\n                bootmgr.setupEvent.checkboxObject(item, $editObj);\r\n            }\r\n\r\n        });\r\n    },\r\n    setupItems: function(key, value, obj) {\r\n        let $element = $("[name=" + key.toLowerCase() + "]");\r\n        if ($element !== undefined) {\r\n            // Checkbox + Label\r\n            if (typeof(value) === \'boolean\' && $element.prop("type") == "checkbox") {\r\n                let $label = $element.parent().parent().parent().find(".check-label");\r\n                if (value == true) {\r\n                    $element.attr("checked", "");\r\n                    $label.removeClass("text-dark").addClass("text-white");\r\n                    $label.removeClass("bg-danger").addClass("bg-success");\r\n                    $label.html("ON");\r\n                } else {\r\n                    $element.removeAttr("checked");\r\n                    $label.removeClass("text-dark").addClass("text-white");\r\n                    $label.removeClass("bg-success").addClass("bg-danger");\r\n                    $label.html("OFF");\r\n                }\r\n                if (bootmgr.setupEvent.done == false) {\r\n                    bootmgr.setupEvent.checkboxItem(obj, $element);\r\n                }\r\n                bootmgr.markCheckboxLabel($label, value);\r\n            }\r\n            // Input, Select + Label\r\n            if (typeof(value) === "string" || typeof(value) === "number") {\r\n                if ($element.is("input")) {\r\n                    let $label = $element.parent().parent().parent().find(".text-label");\r\n                    $element.val(value);\r\n                    $label.html(value);\r\n                    if (bootmgr.setupEvent.done == false) {\r\n                        bootmgr.setupEvent.inputItem(obj, $element);\r\n                    }\r\n                    bootmgr.markInputLabel($label, value);\r\n                }\r\n                if ($element.is("select")) {\r\n                    let $label = $element.parent().parent().find(".text-label");\r\n                    $element.find("option[value=" + value + "]").attr("selected", "select");\r\n                    $label.html(value);\r\n                    if (bootmgr.setupEvent.done == false) {\r\n                        bootmgr.setupEvent.selectItem(obj, $element);\r\n                    }\r\n                    bootmgr.markInputLabel($label, value);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    setLabel: function($lb, value) {\r\n        if (value == true) {\r\n            $lb.removeClass("text-dark").addClass("text-white");\r\n            $lb.removeClass("bg-danger").addClass("bg-success");\r\n            $lb.html("ON");\r\n        }\r\n        if (value == false) {\r\n            $lb.removeClass("text-dark").addClass("text-white");\r\n            $lb.removeClass("bg-success").addClass("bg-danger");\r\n            $lb.html("OFF");\r\n        }\r\n    },\r\n    setCheckbox: function($cb, value) {\r\n        if (value == true) $cb.attr("checked", "checked");\r\n        if (value == false) $cb.removeAttr("checked");\r\n    },\r\n\r\n    network: {\r\n\r\n        setup: function() {\r\n            let $editReconnect = $("#Reconnect button");\r\n            let $inputReconnect = $("input[name=reconnect]");\r\n            if (bootmgr.data.boot.hasOwnProperty("NETWORK")) {\r\n                if (bootmgr.data.boot["NETWORK"].hasOwnProperty("WIFI")) {\r\n                    let value = bootmgr.data.boot["NETWORK"]["WIFI"];\r\n                    if (value == false) {\r\n                        $editReconnect.attr(\'disabled\', \'disabled\');\r\n                        $inputReconnect.attr(\'disabled\', \'disabled\');\r\n                    }\r\n                    if (value == true) {\r\n                        $editReconnect.removeAttr(\'disabled\');\r\n                        $inputReconnect.removeAttr(\'disabled\');\r\n                    }\r\n                }\r\n                bootmgr.data.tmp["default"] = $("input[name=default]").val();\r\n                bootmgr.data.tmp["reconnect"] = $("input[name=reconnect]").val();\r\n            } else {\r\n                bootmgr.data.tmp["reconnect"] = 0;\r\n            }\r\n        },\r\n\r\n        init: function() {\r\n\r\n            // Click => edit reconnect\r\n            $("#Reconnect button").click(\r\n                function() {\r\n                    var $input = $("input[name=reconnect]");\r\n                    var $label = $("#Reconnect h5");\r\n                    $label.toggleClass("visually-hidden");\r\n                    $input.toggleClass("visually-hidden");\r\n                    if (!$input.hasClass("visually-hidden")) {\r\n                        $input.removeAttr("disabled")\r\n                        $input.focus()\r\n                    }\r\n                    $label.html($input.val());\r\n                }\r\n            );\r\n\r\n            // Blur => validate reconnect value\r\n            $("input[name=reconnect]").blur(\r\n                function() {\r\n                    let $input = $(this);\r\n                    let key = $input.attr("name");\r\n                    let value = $input.val();\r\n                    if (value == "") {\r\n                        $input.val(0);\r\n                        value = 0;\r\n                    }\r\n                    if (key === undefined) {\r\n                        return;\r\n                    }\r\n                    bootmgr.data.tmp["reconnect"] = value;\r\n                }\r\n            );\r\n\r\n            // Blur => set value 0 if \'smart\' is not checked\r\n            $("input[name=default]").blur(\r\n                function() {\r\n                    let $input = $(this);\r\n                    let value = $input.val();\r\n                    if (value == "" && !$("input[name=smart]").is(\':checked\')) {\r\n                        $input.val(bootmgr.data.tmp["default"]);\r\n                    } else {\r\n                        bootmgr.data.tmp["default"] = value;\r\n                    }\r\n                }\r\n            );\r\n\r\n            // Click => set selected default network from list\r\n            $("#selectDefaultNetwork").find("li a").click(\r\n                function() {\r\n                    let $input = $("input[name=default]");\r\n                    let value = $(this).html();\r\n                    $input.val(value);\r\n                    bootmgr.data.tmp["default"] = value;\r\n                    $input.trigger("blur");\r\n                }\r\n            );\r\n        },\r\n\r\n        setNetworks: function(networks) {\r\n            let list = document.getElementById("selectDefaultNetwork");\r\n            list.innerHTML = "";\r\n            let input = document.querySelector("input[name=default]");\r\n            Object.entries(networks).forEach(([key, value]) => {\r\n                let li = document.createElement(\'li\');\r\n                let a = document.createElement(\'a\');\r\n                a.classList.add("dropdown-item");\r\n                a.innerHTML = value;\r\n                list.appendChild(li);\r\n                li.appendChild(a);\r\n                a.addEventListener("click", (event) => {\r\n                    input.value = value;\r\n                    input.focus();\r\n                });\r\n                if (bootmgr.data.boot.hasOwnProperty("NETWORK") && value == bootmgr.data.boot.NETWORK.DEFAULT) {\r\n                    input.value = value;\r\n                    a.classList.add("text-primary");\r\n                }\r\n            })\r\n        }\r\n    },\r\n\r\n    networks: {\r\n        init: function() {},\r\n        setup: function() {},\r\n\r\n        // get data from server\r\n        getNetworks: function(callback) {\r\n            $.ajax({\r\n                url: server.url + "/networks",\r\n                type: \'GET\',\r\n                cache: false,\r\n                dataType: \'json\',\r\n                success: function(data, textStatus, jqXHR) {\r\n                    if (typeof(data) === undefined || data == null) {\r\n                        console.log("getNetworks: no response")\r\n                        page.message("Could not load networks", "error")\r\n                    } else {\r\n                        if (data.hasOwnProperty("error")) {\r\n                            page.message(data["error"], "error")\r\n                            console.log("getNetworks:", data["error"])\r\n                            bootmgr.data.networks = {};\r\n                        }\r\n                        if (data.hasOwnProperty("info")) {\r\n                            //console.log("networks:", data)\r\n                            page.message(data["info"], "info")\r\n                            bootmgr.data.networks = {};\r\n                        }\r\n                        if (data.hasOwnProperty("success")) {\r\n                            //console.log("networks:", data)\r\n                            // page.message(data["success"], "info")\r\n                            delete data["success"];\r\n                            callback(data);\r\n                        }\r\n                    }\r\n                },\r\n                error: function(jqXHR, errorThrown) {\r\n                    console.log("getNetworks: ", errorThrown);\r\n                    page.message("Could not load networks", "error")\r\n                    bootmgr.data.networks = {};\r\n                },\r\n                complete: function() {\r\n                    console.log(\'getNetworks: complete\');\r\n\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nvar sensor = {\r\n\r\n    running: false,\r\n    retrys: 2,\r\n    data_error: false,\r\n    timeout: 7000,\r\n    loadSensors: document.getElementById("loadSensors"),\r\n    startSensorDataStream: document.getElementById("startSensorDataStream"),\r\n    startSensorData: document.getElementById("startSensorData"),\r\n    stopSensorData: document.getElementById("stopSensorData"),\r\n    loadingSpinner: document.body.querySelector(".lds"),\r\n    state: document.body.querySelector(".state"),\r\n\r\n    init: function() {\r\n        this.getSensors(function(callback) {\r\n            this.sensors = callback;\r\n            if (this.sensors.length == 0) {\r\n                return;\r\n            }\r\n            sensor.loadSensors.classList.add("visually-hidden");\r\n            Object.entries(this.sensors).forEach(([sname, state]) => {\r\n                if (state == true) {\r\n                    // console.log("active sensor", sname);\r\n                    if (sname == "scd30") {\r\n                        document.getElementById(sname).classList.remove("visually-hidden");\r\n                        sensor.start(sname);\r\n                        sensor.setup(sname);\r\n                    }\r\n                }\r\n                //console.log(sname, state);\r\n            })\r\n        });\r\n        // this.start();\r\n        // this.setup();\r\n    },\r\n\r\n\r\n    setup: function(snam) {\r\n        let obj = document.getElementById(snam);\r\n        if (obj != null) {\r\n            let startSensorData = obj.querySelector(".startSensorData");\r\n            let stopSensorData = obj.querySelector(".stopSensorData");\r\n            let startSensorDataStream = obj.querySelector(".startSensorDataStream");\r\n            startSensorData.addEventListener("click", () => { this.start(snam); });\r\n            stopSensorData.addEventListener("click", () => { this.stop(snam); });\r\n            //\r\n            // startSensorDataStream.addEventListener("click", () => { this.startStream(snam); });\r\n        }\r\n\r\n        $(".progress").each(function() {\r\n            let value = $(this).attr("data-value");\r\n            let left = $(this).find(".progress-left .progress-bar");\r\n            let right = $(this).find(".progress-right .progress-bar");\r\n            if (value > 0) {\r\n                if (value <= 50) {\r\n                    degree = (value / 100) * 360;\r\n                    right.css("transform", "rotate(" + degree + "deg)");\r\n                } else {\r\n                    degree = ((value - 50) / 100) * 360;\r\n                    right.css("transform", "rotate(180deg)");\r\n                    left.css("transform", "rotate(" + degree + "deg)");\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    startStream: function(sname) {\r\n        sensor.getSensorDataStream(sname);\r\n    },\r\n\r\n    // start: function(sname) {\r\n    //     this.id = 1;\r\n    //     this.name = sname\r\n    //     this.running = true;\r\n    //     this.data_error = 0;\r\n    //     this.async = false;\r\n    //     this.getSensorData(sname, function() { sleep(10000) });\r\n    //     // nextSensorData(sensor.timeout)\r\n    //     this.startSensorData.classList.add("visually-hidden");\r\n    //     this.stopSensorData.classList.remove("visually-hidden");\r\n    //     this.loadingSpinner.classList.add("lds-hourglass");\r\n    //     removeClassWildcard($(this.state), "text-*");\r\n    //     this.state.innerHTML = "RUNNING";\r\n    //     this.state.classList.add("text-success");\r\n    //     console.log(\'getSensordata: started\');\r\n    // },\r\n\r\n    start: async function(modul) {\r\n        this.modul = new Object();\r\n        this.modul.id = 0;\r\n        this.modul.name = modul\r\n        this.modul.running = true;\r\n        this.modul.error = 0;\r\n        this.modul.async = true;\r\n        this.modul.interval = 6000;\r\n\r\n        this.startSensorData.classList.add("visually-hidden");\r\n        this.stopSensorData.classList.remove("visually-hidden");\r\n        this.loadingSpinner.classList.add("lds-hourglass");\r\n        removeClassWildcard($(this.state), "text-*");\r\n        this.state.innerHTML = "RUNNING";\r\n        this.state.classList.add("text-success");\r\n\r\n        console.log(\'getSensordata: started\', modul);\r\n\r\n        while (this.modul.running == true && this.modul.error < sensor.retrys) {\r\n            this.modul.id++;\r\n            if (this.modul.error != 0) {\r\n                console.log(\'getSensordata: retry \', this.modul.error);\r\n                // sensor.restart(sname);\r\n            }\r\n            if (this.modul.id == sensor.retrys && this.modul.error == 0) this.modul.async = true;\r\n            if (this.modul.running == true && this.modul.error > sensor.retrys) {\r\n                page.message("Could not load sensordata " + this.modul.name, "error")\r\n                this.error(modul);\r\n                this.stop(modul);\r\n            }\r\n            this.getSensorData(modul);\r\n            await timeout(this.modul.interval);\r\n        }\r\n    },\r\n\r\n    _start: async function(sname) {\r\n        this.id = 0;\r\n        this.name = sname\r\n        this.running = true;\r\n        this.data_error = 0;\r\n        this.async = true;\r\n        this.timeout = 6000;\r\n        this.startSensorData.classList.add("visually-hidden");\r\n        this.stopSensorData.classList.remove("visually-hidden");\r\n        this.loadingSpinner.classList.add("lds-hourglass");\r\n        removeClassWildcard($(this.state), "text-*");\r\n        this.state.innerHTML = "RUNNING";\r\n        this.state.classList.add("text-success");\r\n        console.log(\'getSensordata: started\');\r\n        while (this.running == true && this.data_error < sensor.retrys) {\r\n            sensor.id++;\r\n            if (sensor.data_error != 0) {\r\n                console.log(\'getSensordata: retry \', sensor.data_error);\r\n                // sensor.restart(sname);\r\n            }\r\n            if (this.id == sensor.retrys && this.data_error == 0) this.async = true;\r\n            if (this.running == true && this.data_error > sensor.retrys) {\r\n                page.message("Could not load sensordata", "error")\r\n                sensor.error();\r\n                sensor.stop(sname);\r\n            }\r\n            sensor.getSensorData(sname);\r\n            await timeout(sensor.timeout);\r\n            // sleep(sensor.timeout);\r\n        }\r\n    },\r\n\r\n    stop: function(modul) {\r\n        this.modul.running = false;\r\n        this.stopSensorData.classList.add("visually-hidden");\r\n        this.startSensorData.classList.remove("visually-hidden");\r\n        this.loadingSpinner.classList.remove("lds-hourglass");\r\n        removeClassWildcard($(this.state), "text-*");\r\n        this.state.innerHTML = "STOPPED";\r\n        this.state.classList.add("text-warning");\r\n        console.log(\'getSensordata: stopped\');\r\n    },\r\n\r\n    restart: async function(modul) {\r\n        this[modul].running = false;\r\n        this[modul].error = 0;\r\n        await timeout(this[modul].timeout);\r\n        this[modul].running = true;\r\n    },\r\n\r\n    // restart: function(snam) {\r\n    //     this.running = false;\r\n    //     sleep(sensor.timeout)\r\n    //     this.running = true;\r\n    //     sleep(2000)\r\n    //     this.getSensorData(snam);\r\n    // },\r\n\r\n    error: function(msg = "ERROR") {\r\n        removeClassWildcard($(this.state), "text-*");\r\n        this.state.innerHTML = msg;\r\n        this.state.classList.add("text-danger");\r\n    },\r\n\r\n    info: function(msg = "No Snesor Data") {\r\n        removeClassWildcard($(this.state), "text-*");\r\n        this.state.innerHTML = msg;\r\n        this.state.classList.add("text-warning");\r\n    },\r\n\r\n    // get used sensors from esp\r\n    getSensors: function(callback) {\r\n        $.ajax({\r\n            url: server.url + "/sensors",\r\n            type: \'GET\',\r\n            cache: false,\r\n            async: true,\r\n            dataType: \'json\',\r\n            success: function(data) {\r\n                if (typeof(data) === undefined || data == null) {\r\n                    console.log("getSensors: no response")\r\n                    page.message("Could not load sensors", "error")\r\n                } else {\r\n                    if (data.hasOwnProperty("error")) {\r\n                        page.message(data["error"], "error")\r\n                    }\r\n                    if (data.hasOwnProperty("info")) {\r\n                        page.message(data["info"], "info")\r\n                    }\r\n                    if (data.hasOwnProperty("success")) {\r\n                        page.message(data["success"], "info")\r\n                        delete data["success"]\r\n                        callback(data)\r\n                    }\r\n                }\r\n            },\r\n            error: function(jqXHR, textStatus, errorThrown) {\r\n                console.log("getSensors: " + errorThrown);\r\n                page.message("Could not load sensors", "error")\r\n            },\r\n            complete: function() {\r\n                console.log(\'getSensors: complete\');\r\n            }\r\n        });\r\n    },\r\n\r\n    // get sensor data\r\n    getSensorDataStream: function(sname) {\r\n\r\n        var eventSource;\r\n\r\n        if (!!window.EventSource) {\r\n            eventSource = new EventSource(server.url + "/sensordatastream");\r\n\r\n        } else {\r\n            page.message(\'Dein Browser untestützt keine HTML5 Server-Sent Events\', \'error\');\r\n            return;\r\n        }\r\n\r\n        eventSource.addEventListener(\'open\', () => {\r\n            console.log(\'Verbindung wurde erfolgreich hergestellt.\');\r\n        });\r\n\r\n        eventSource.addEventListener(\'message\', (event) => {\r\n            if (typeof(event.data) === undefined || event.data == null) {\r\n                console.log("getSensorDataStream: no response")\r\n            } else {\r\n                let data = JSON.parse(event.data);\r\n                if (data.hasOwnProperty("error")) {\r\n                    page.message(data["error"], "error")\r\n                }\r\n                if (data.hasOwnProperty("info")) {\r\n                    page.message(data["info"] + "info")\r\n                }\r\n                if (data.hasOwnProperty("success")) {\r\n                    console.log(\'getSensorDataStream:\', event.data);\r\n                    page.message(data["success"], "info")\r\n                }\r\n            }\r\n            console.log(\'getSensorDataStream:\', event.data);\r\n        });\r\n\r\n        eventSource.addEventListener(\'error\', (event) => {\r\n            console.log("error:", event);\r\n            eventSource.close();\r\n            page.message(\'EventSource "getSensorDataStream" connection closed.\', \'error\');\r\n        });\r\n\r\n    },\r\n\r\n    // get sensor data\r\n    getSensorData: function(sname, calback) {\r\n        $.ajax({\r\n            url: server.url + "/sensordata",\r\n            type: \'POST\',\r\n            contentType: \'application/json\',\r\n            data: JSON.stringify({ "id": sensor.id }),\r\n            async: sensor.async,\r\n            timeout: sensor.timeout,\r\n            cache: false,\r\n            dataType: \'json\',\r\n            success: function(data, textStatus, jqXHR) {\r\n                if (typeof(data) === undefined || data == null) {\r\n                    console.log("sensordata: no response")\r\n                    page.message("Could not load sensordata", "error")\r\n                } else {\r\n                    if (data.hasOwnProperty("error") && typeof(data["error"]) === "string") {\r\n                        page.message(data["error"], "error")\r\n                        sensor.error();\r\n                        console.log("sensordata:", data["error"])\r\n                    }\r\n                    if (data.hasOwnProperty("info")) {\r\n                        //page.message(data["info"], "info")\r\n                        sensor.info(data["info"]);\r\n                        console.log("sensordata:", data["info"])\r\n                    }\r\n                    if (data.hasOwnProperty("success")) {\r\n                        //console.log("sensordata:", data)\r\n                        sensor.data_error = 0;\r\n                        sensor.setSensorData(data, "scd30");\r\n                    }\r\n                }\r\n            },\r\n            error: function(jqXHR, textStatus, errorThrown) {\r\n                sensor.data_error++;\r\n                console.log("getSensordata: ", errorThrown);\r\n            },\r\n            complete: function() {\r\n                console.log(\'getSensordata: complete\');\r\n            }\r\n        });\r\n    },\r\n\r\n    // set data values\r\n    setSensorData: function(data, sensor) {\r\n        let obj = document.getElementById(sensor);\r\n        Object.entries(data).forEach(([key, value]) => {\r\n            let item = obj.querySelector("." + key);\r\n            let progress = obj.querySelector(".progress-" + key);\r\n            if (item) {\r\n                item.innerHTML = value;\r\n            }\r\n            if (progress) {\r\n                let width = 0;\r\n                switch (key) {\r\n                    case "temp":\r\n                        width = value + 50;\r\n                        progress.setAttribute("aria-valuenow", value);\r\n                        progress.style.width = width + \'%\';\r\n                        break;\r\n                    case "relh":\r\n                        progress.setAttribute("aria-valuenow", value);\r\n                        progress.style.width = value + \'%\';\r\n                        break;\r\n                    case "co2":\r\n                        let score = this.score.co2(value);\r\n                        let state = obj.querySelector("." + key + "-state");\r\n                        state.innerHTML = score.label;\r\n                        removeClassWildcard($(progress), "bg-*");\r\n                        removeClassWildcard($(state), "text-*");\r\n                        progress.setAttribute("aria-valuenow", value);\r\n                        progress.style.width = score.percent + \'%\';\r\n                        progress.classList.add("bg-" + score.cls)\r\n                        state.classList.add("text-" + score.cls)\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    score: {\r\n        co2: function(value) {\r\n            let base = 400;\r\n            let score = new Object();\r\n\r\n            score.label = "UNKNOWN";\r\n            score.lvl = -1;\r\n            score.percent = 0;\r\n            score.cls = "light";\r\n\r\n            if (value > 0 && value < base) {\r\n                score.percent = value / (base / 100);\r\n                score.lvl = 0;\r\n                score.label = "GREAT";\r\n            }\r\n            if (value >= base && value <= 800) {\r\n                score.percent = (value - base) / ((1000 - base) / 100)\r\n                score.lvl = 1;\r\n                score.label = "GOOD";\r\n            }\r\n            if (value >= 800 && value <= 1000) {\r\n                score.percent = (value - base) / ((1000 - base) / 100)\r\n                score.lvl = 1;\r\n                score.label = "NORMAL";\r\n            }\r\n            if (value > 1000 && value <= 1600) {\r\n                score.percent = (value - base) / ((1600 - base) / 100)\r\n                score.lvl = 2;\r\n                score.label = "WARNING";\r\n            }\r\n            if (value > 1600 && value <= 5000) {\r\n                score.percent = (value - base) / ((5000 - base) / 100)\r\n                score.label = "DANGER";\r\n                score.lvl = 3;\r\n            }\r\n            if (value < 0 || value > 5000) {\r\n                score.percent = 0;\r\n                score.label = "VALUE OUT OF RANGE";\r\n                score.lvl = -1;\r\n            }\r\n            switch (score.lvl) {\r\n                case 0:\r\n                    score.cls = "success"\r\n                    break;\r\n                case 1:\r\n                    score.cls = "success"\r\n                    break;\r\n                case 2:\r\n                    score.cls = "warning"\r\n                    break;\r\n                case 3:\r\n                    score.cls = "danger"\r\n                    break;\r\n            }\r\n            return score;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// $(document).ready(function() {\r\nserver.ap();\r\nif (server.connected == false) server.base();\r\npage.init();\r\n// });\n\n//# sourceURL=webpack://package/./src/js/script.js?')}},__webpack_module_cache__={};function __webpack_require__(e){var r=__webpack_module_cache__[e];if(void 0!==r)return r.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}__webpack_require__.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(r,{a:r}),r},__webpack_require__.d=(e,r)=>{for(var n in r)__webpack_require__.o(r,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},__webpack_require__.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r);var __webpack_exports__=__webpack_require__(138)})();